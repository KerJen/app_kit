// Mocks generated by Mockito 5.3.2 from annotations
// in tech_stack/test/mocks/source/source_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tech_stack/data/weather/model/city.dart' as _i2;
import 'package:tech_stack/data/weather/model/weather.dart' as _i3;
import 'package:tech_stack/data/weather/source/weather_remote_source/weather_remote_source.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCityModel_0 extends _i1.SmartFake implements _i2.CityModel {
  _FakeCityModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_1 extends _i1.SmartFake implements _i3.WeatherModel {
  _FakeWeatherModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteSource extends _i1.Mock
    implements _i4.WeatherRemoteSource {
  @override
  _i5.Future<_i2.CityModel> getCityByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getCityByName,
          [name],
        ),
        returnValue: _i5.Future<_i2.CityModel>.value(_FakeCityModel_0(
          this,
          Invocation.method(
            #getCityByName,
            [name],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.CityModel>.value(_FakeCityModel_0(
          this,
          Invocation.method(
            #getCityByName,
            [name],
          ),
        )),
      ) as _i5.Future<_i2.CityModel>);
  @override
  _i5.Future<_i3.WeatherModel> getWeatherByCoords({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByCoords,
          [],
          {
            #lat: lat,
            #lon: lon,
          },
        ),
        returnValue: _i5.Future<_i3.WeatherModel>.value(_FakeWeatherModel_1(
          this,
          Invocation.method(
            #getWeatherByCoords,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.WeatherModel>.value(_FakeWeatherModel_1(
          this,
          Invocation.method(
            #getWeatherByCoords,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
      ) as _i5.Future<_i3.WeatherModel>);
}
